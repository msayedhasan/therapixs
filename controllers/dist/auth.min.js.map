{"version":3,"sources":["auth.js"],"names":["SMS","require","JWT_SECRET","cookie","bcrypt","setToken","user","jwt","sign","iat","Date","getTime","User","_id","toString","env","generateOTP","OTP","i","Math","floor","random","exports","signup","req","res","next","name","phone","password","address","fcmToken","error","newUser","token","regeneratorRuntime","async","_context","prev","console","log","body","parseInt","awrap","hash","hashedPassword","sent","Error","local","otpVerified","save","abrupt","status","json","message","t0","statusCode","stop","login","_error","_context2","findOne","compare","isEqual","undefined","secure","serialize","httpOnly","admin","owner","clinic","resetPassword","generatedOTP","smsRes","_error2","_error3","_context3","send","concat","type","maxAge","setHeader","msg","verifyOtp","otp","_error4","_context4","resendOtp","_error5","_error6","_context5","apple","email","existingAppleUser","_token","existingUser","_token2","_context6","apple.email","google.email","facebook.email","methods","includes","syncApple","loggedInUser","_context7","findById","model","populate","path","push","google","id","existingGoogleUser","_token3","_token4","_context8","google.id","$or","data","_context9","facebook","image","existingFacebookUser","_token5","_token6","_context10","facebook.id","syncFacebook","_context11","getProfile","authHeader","decodedToken","_error7","_error8","_context12","get","split","verify","userId","syncGoogle","t1","facebookOAuth","_context13","googleOAuth","_context14","err"],"mappings":"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","file":"auth.min.js","sourcesContent":["const SMS = require(\"../startup/sms_send\");\nrequire(\"dotenv/config\");\n\nconst { JWT_SECRET } = require(\"../config/index\");\nconst bcrypt = require(\"bcryptjs\");\nconst cookie = require(\"cookie\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst User = require(\"../models/stackholders/user\");\n\nsetToken = (user) => {\n  return jwt.sign(\n    {\n      iat: new Date().getTime(),\n      userId: user._id.toString(),\n    },\n    process.env.JWT_SECRET\n    // JWT_SECRET\n    // { expiresIn: \"1h\" }\n  );\n};\n\ngenerateOTP = () => {\n  // Declare a digits variable\n  // which clinics all digits\n  var digits = \"0123456789\";\n  let OTP = \"\";\n  for (let i = 0; i < 4; i++) {\n    OTP += digits[Math.floor(Math.random() * 10)];\n  }\n  return OTP;\n};\n\nexports.signup = async (req, res, next) => {\n  console.log(\"sign up\");\n  const name = req.body.name;\n  //   const email = req.body.email;\n  const phone = parseInt(req.body.phone);\n  const password = req.body.password;\n  const address = req.body.address;\n  let fcmToken;\n  if (req.body.fcmToken) {\n    fcmToken = req.body.fcmToken;\n  } else {\n    fcmToken = \"\";\n  }\n  hashedPassword = await bcrypt.hash(password, 12);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (user) {\n      const error = new Error(\"user phone existed\");\n      error.statusCode = 401;\n      throw error;\n    }\n\n    const newUser = new User({\n      name: name,\n      phone: phone,\n      methods: [\"phone\"],\n      local: {\n        password: hashedPassword,\n      },\n      address: address,\n      fcmToken: fcmToken,\n    });\n\n    // let generatedOTP = generateOTP();\n    // console.log(\"generateOTP\");\n    // let smsRes = await SMS.send(\n    //   newUser.phone,\n    //   `Your MotoBar OTP is ${generatedOTP}`\n    // );\n    // if (smsRes) {\n    //   if (smsRes[0] && smsRes[0].type === \"success\") {\n    //     newUser.otp = generatedOTP;\n    //     newUser.otpVerified = false;\n    //     await newUser.save();\n    //     const token = setToken(newUser);\n    //     return res.status(201).json({\n    //       message: \"Success\",\n    //       token: token,\n    //     });\n    //   } else {\n    //     console.log(\"smsRes error\");\n    //     console.log(smsRes);\n\n    //     const error = new Error(smsRes.error.msg);\n    //     error.statusCode = 400;\n    //     throw error;\n\n    //     newUser.otp = 2222;\n    //     newUser.otpVerified = false;\n        newUser.otpVerified = true;\n        await newUser.save();\n        const token = setToken(newUser);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n    //   }\n    // } else {\n    //   const error = new Error(\"Failed to send OTP\");\n    //   error.statusCode = 400;\n    //   throw error;\n    // }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.login = async (req, res, next) => {\n  // const email = req.body.email;\n  const phone = parseInt(req.body.phone);\n  const password = req.body.password;\n  try {\n    const user = await User.findOne({ phone: phone });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 401;\n      throw error;\n    }\n    // const user = await User.findOne({ \"local.email\": email });\n    // if (!user) {\n    //   const error = new Error(\"user not found\");\n    //   error.statusCode = 401;\n    //   throw error;\n    // }\n    isEqual = await bcrypt.compare(password, user.local.password);\n    if (!isEqual) {\n      const error = new Error(\"Wrong password\");\n      error.statusCode = 401;\n      throw error;\n    }\n\n    const fcmToken = req.body.fcmToken;\n\n    if (!fcmToken && !user.fcmToken) {\n      user.fcmToken = undefined;\n    } else if (fcmToken) {\n      user.fcmToken = fcmToken;\n    }\n\n    await user.save();\n    const token = setToken(user);\n\n    res.cookie(\"jwt\", token, {\n      maxAge: 3600,\n      httpOnly: true,\n      secure: true,\n    });\n\n    res.setHeader(\n      \"Set-Cookie\",\n      cookie.serialize(\"token\", token, {\n        httpOnly: true,\n        maxAge: 60 * 60 * 24 * 7, // 1 week\n      })\n    );\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      admin: user.admin,\n      owner: user.owner,\n      shipper: user.shipper,\n      clinic: user.clinic,\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.resetPassword = async (req, res, next) => {\n  console.log(\"reset password\");\n  const phone = parseInt(req.body.phone);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    let generatedOTP = generateOTP();\n\n    let smsRes = await SMS.send(\n      user.phone,\n      `Your MotoBar OTP is ${generatedOTP}`\n    );\n    if (smsRes) {\n      if (smsRes[0] && smsRes[0].type === \"success\") {\n        user.otp = generatedOTP;\n        user.otpVerified = false;\n        user.resetPassword = true;\n        await user.save();\n        const token = setToken(user);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n      } else {\n        const error = new Error(smsRes.error.msg);\n        error.statusCode = 400;\n        throw error;\n      }\n    } else {\n      const error = new Error(\"Failed to send OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.verifyOtp = async (req, res, next) => {\n  const phone = parseInt(req.body.phone);\n  const otp = parseInt(req.body.otp);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n    console.log(user);\n    console.log(user.otp);\n    console.log(otp);\n    if (user.otp !== otp) {\n      const error = new Error(\"Invalid OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    user.otp = undefined;\n    user.otpVerified = true;\n\n    await user.save();\n\n    const token = setToken(user);\n    return res.status(201).json({\n      message: \"Success\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.resendOtp = async (req, res, next) => {\n  console.log(\"resend otp\");\n  const phone = parseInt(req.body.phone);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    let generatedOTP = generateOTP();\n\n    let smsRes = await SMS.send(\n      user.phone,\n      `Your MotoBar OTP is ${generatedOTP}`\n    );\n\n    if (smsRes) {\n      if (smsRes[0] && smsRes[0].type === \"success\") {\n        user.otp = generatedOTP;\n        user.otpVerified = false;\n        await user.save();\n        const token = setToken(user);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n      } else {\n        const error = new Error(smsRes.error.msg);\n        error.statusCode = 400;\n        throw error;\n      }\n    } else {\n      const error = new Error(\"Failed to send OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.apple = async (req, res, next) => {\n  // const email = req.body.email;\n  const email = req.body.email;\n  const name = req.body.name;\n  const fcmToken = req.body.fcmToken;\n\n  try {\n    let existingAppleUser = await User.findOne({\n      \"apple.email\": email,\n    });\n    // check database for same apple email\n    if (existingAppleUser) {\n      const token = setToken(existingAppleUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingAppleUser.admin,\n        owner: existingAppleUser.owner,\n        token: token,\n      });\n    }\n    // check database for same email for other social platforms\n    const existingUser = await User.findOne({\n      $or: [{ \"google.email\": email }, { \"facebook.email\": email }],\n    });\n    if (existingUser) {\n      if(!existingUser.methods.includes(\"apple\")) {\n        existingUser.methods.push(\"apple\");\n      }\n      existingUser.apple = {\n        email: email,\n      };\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n    // // // check database for the same device used\n    // // if (fcmToken) {\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"apple\");\n    // //     existingDeviceUser.apple = {\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n    const newUser = new User({\n      name: name,\n      methods: [\"apple\"],\n      apple: {\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncApple = async (req, res, next) => {\n  // const email = req.body.email;\n  const email = req.body.email;\n  const name = req.body.name;\n  try {\n    const loggedInUser = req.user;\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n\n      if(!user.methods.includes(\"apple\")) {\n        user.methods.push(\"apple\");\n      }\n    user.apple = {\n      email: email,\n    };\n    await user.save();\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.google = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const fcmToken = req.body.fcmToken;\n  try {\n    let existingGoogleUser = await User.findOne({\n      \"google.id\": id,\n    });\n    if (existingGoogleUser) {\n      const token = setToken(existingGoogleUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingGoogleUser.admin,\n        owner: existingGoogleUser.owner,\n        token: token,\n      });\n    }\n    // const existingUser = await User.findOne({ \"facebook.email\": email });\n    const existingUser = await User.findOne({\n      $or: [{ \"apple.email\": email }, { \"facebook.email\": email }],\n    });\n    if (existingUser) {\n      if(!existingUser.methods.includes(\"google\")) {\n        existingUser.methods.push(\"google\");\n      }\n      existingUser.google = {\n        id: id,\n        email: email,\n      };\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n\n    // // if (fcmToken) {\n    // //   // check database for the same device used\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"google\");\n    // //     existingDeviceUser.google = {\n    // //       id: id,\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n\n    const newUser = new User({\n      name: name,\n      methods: [\"google\"],\n      google: {\n        id: id,\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncGoogle = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  try {\n    const loggedInUser = req.user;\n\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n \n      if(!user.methods.includes(\"google\")) {\n        user.methods.push(\"google\");\n   }\n    user.google = {\n      id: id,\n      email: email,\n    };\n    await user.save();\n    \n    \n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.facebook = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const image = req.body.image;\n  const fcmToken = req.body.fcmToken;\n  try {\n    let existingFacebookUser = await User.findOne({\n      \"facebook.id\": id,\n    });\n    if (existingFacebookUser) {\n      existingFacebookUser.image = image;\n      await existingFacebookUser.save();\n      const token = setToken(existingFacebookUser);\n\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingFacebookUser.admin,\n        owner: existingFacebookUser.owner,\n        token: token,\n      });\n    }\n    // const existingUser = await User.findOne({ \"facebook.email\": email });\n    const existingUser = await User.findOne({\n      $or: [{ \"apple.email\": email }, { \"google.email\": email }],\n    });\n    if (existingUser) {\n      // We want to merge google's data with local auth\n      if(!existingUser.methods.includes(\"facebook\")) {\n\n        existingUser.methods.push(\"facebook\");\n      }\n      existingUser.facebook = {\n        id: id,\n        email: email,\n      };\n      existingUser.image = image;\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n\n    // // if (fcmToken) {\n    // //   // check database for the same device used\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"facebook\");\n    // //     existingDeviceUser.facebook = {\n    // //       id: id,\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n\n    const newUser = new User({\n      name: name,\n      image: image,\n      methods: [\"facebook\"],\n      facebook: {\n        id: id,\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncFacebook = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const image = req.body.image;\n  try {\n    const loggedInUser = req.user;\n\n\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n      if(!user.methods.includes(\"facebook\")) {\n        user.methods.push(\"facebook\");\n      }\n    user.facebook = {\n      id: id,\n      email: email,\n    };\n    user.image = image;\n    await user.save();\n\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.getProfile = async (req, res, next) => {\n  const authHeader = req.get(\"Authorization\");\n  if (!authHeader) {\n    const error = new Error(\"Not Authenticated.\");\n    error.statusCode = 401;\n    throw error;\n  }\n  const token = authHeader.split(\" \")[1];\n  let decodedToken;\n  try {\n    decodedToken = jwt.verify(token, \n    process.env.JWT_SECRET\n    // JWT_SECRET,\n    );\n  } catch (err) {\n    err.statusCode = 500;\n    throw err;\n  }\n  if (!decodedToken) {\n    const error = new Error(\"Not Authenticated.\");\n    error.statusCode = 401;\n    throw error;\n  }\n  try {\n    let user = await User.findById(decodedToken.userId)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n    if (!user) {\n      const error = new Error(\"Could not find user.\");\n      error.statusCode = 404;\n      throw error;\n    }\n\n    return res.status(200).json({ message: \"Profile fetched.\", data: user });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.facebookOAuth = async (req, res, next) => {\n  try {\n    const token = setToken(req.user);\n    return res.status(201).json({\n      message: \"Success\",\n      user: req.user,\n      token: token,\n    });\n  } catch (err) {\n    // use express to return error\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err); // sends err to the error handling message in app.js\n  }\n};\n\nexports.googleOAuth = async (req, res, next) => {\n  try {\n    const token = setToken(req.user);\n    res.status(201).json({\n      message: \"Success\",\n      user: req.user,\n      token: token,\n    });\n  } catch (err) {\n    // use express to return error\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err); // sends err to the error handling message in app.js\n  }\n};\n"]}