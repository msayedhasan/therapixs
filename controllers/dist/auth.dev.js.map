{"version":3,"sources":["auth.js"],"names":["SMS","require","JWT_SECRET","bcrypt","cookie","jwt","User","setToken","user","sign","iat","Date","getTime","userId","_id","toString","process","env","generateOTP","digits","OTP","i","Math","floor","random","exports","signup","req","res","next","console","log","name","body","phone","parseInt","password","address","fcmToken","hash","hashedPassword","findOne","error","Error","statusCode","newUser","methods","local","otpVerified","save","token","status","json","message","login","compare","isEqual","undefined","maxAge","httpOnly","secure","setHeader","serialize","admin","owner","shipper","clinic","resetPassword","generatedOTP","send","smsRes","type","otp","msg","verifyOtp","resendOtp","apple","email","existingAppleUser","$or","existingUser","includes","push","syncApple","loggedInUser","findById","populate","path","model","data","google","id","existingGoogleUser","syncGoogle","facebook","image","existingFacebookUser","syncFacebook","getProfile","authHeader","get","split","decodedToken","verify","facebookOAuth","googleOAuth","err"],"mappings":"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","sourcesContent":["const SMS = require(\"../startup/sms_send\");\nrequire(\"dotenv/config\");\n\nconst { JWT_SECRET } = require(\"../config/index\");\nconst bcrypt = require(\"bcryptjs\");\nconst cookie = require(\"cookie\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst User = require(\"../models/stackholders/user\");\n\nsetToken = (user) => {\n  return jwt.sign(\n    {\n      iat: new Date().getTime(),\n      userId: user._id.toString(),\n    },\n    process.env.JWT_SECRET\n    // JWT_SECRET\n    // { expiresIn: \"1h\" }\n  );\n};\n\ngenerateOTP = () => {\n  // Declare a digits variable\n  // which clinics all digits\n  var digits = \"0123456789\";\n  let OTP = \"\";\n  for (let i = 0; i < 4; i++) {\n    OTP += digits[Math.floor(Math.random() * 10)];\n  }\n  return OTP;\n};\n\nexports.signup = async (req, res, next) => {\n  console.log(\"sign up\");\n  const name = req.body.name;\n  //   const email = req.body.email;\n  const phone = parseInt(req.body.phone);\n  const password = req.body.password;\n  const address = req.body.address;\n  let fcmToken;\n  if (req.body.fcmToken) {\n    fcmToken = req.body.fcmToken;\n  } else {\n    fcmToken = \"\";\n  }\n  hashedPassword = await bcrypt.hash(password, 12);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (user) {\n      const error = new Error(\"user phone existed\");\n      error.statusCode = 401;\n      throw error;\n    }\n\n    const newUser = new User({\n      name: name,\n      phone: phone,\n      methods: [\"phone\"],\n      local: {\n        password: hashedPassword,\n      },\n      address: address,\n      fcmToken: fcmToken,\n    });\n\n    // let generatedOTP = generateOTP();\n    // console.log(\"generateOTP\");\n    // let smsRes = await SMS.send(\n    //   newUser.phone,\n    //   `Your MotoBar OTP is ${generatedOTP}`\n    // );\n    // if (smsRes) {\n    //   if (smsRes[0] && smsRes[0].type === \"success\") {\n    //     newUser.otp = generatedOTP;\n    //     newUser.otpVerified = false;\n    //     await newUser.save();\n    //     const token = setToken(newUser);\n    //     return res.status(201).json({\n    //       message: \"Success\",\n    //       token: token,\n    //     });\n    //   } else {\n    //     console.log(\"smsRes error\");\n    //     console.log(smsRes);\n\n    //     const error = new Error(smsRes.error.msg);\n    //     error.statusCode = 400;\n    //     throw error;\n\n    //     newUser.otp = 2222;\n    //     newUser.otpVerified = false;\n        newUser.otpVerified = true;\n        await newUser.save();\n        const token = setToken(newUser);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n    //   }\n    // } else {\n    //   const error = new Error(\"Failed to send OTP\");\n    //   error.statusCode = 400;\n    //   throw error;\n    // }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.login = async (req, res, next) => {\n  // const email = req.body.email;\n  const phone = parseInt(req.body.phone);\n  const password = req.body.password;\n  try {\n    const user = await User.findOne({ phone: phone });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 401;\n      throw error;\n    }\n    // const user = await User.findOne({ \"local.email\": email });\n    // if (!user) {\n    //   const error = new Error(\"user not found\");\n    //   error.statusCode = 401;\n    //   throw error;\n    // }\n    isEqual = await bcrypt.compare(password, user.local.password);\n    if (!isEqual) {\n      const error = new Error(\"Wrong password\");\n      error.statusCode = 401;\n      throw error;\n    }\n\n    const fcmToken = req.body.fcmToken;\n\n    if (!fcmToken && !user.fcmToken) {\n      user.fcmToken = undefined;\n    } else if (fcmToken) {\n      user.fcmToken = fcmToken;\n    }\n\n    await user.save();\n    const token = setToken(user);\n\n    res.cookie(\"jwt\", token, {\n      maxAge: 3600,\n      httpOnly: true,\n      secure: true,\n    });\n\n    res.setHeader(\n      \"Set-Cookie\",\n      cookie.serialize(\"token\", token, {\n        httpOnly: true,\n        maxAge: 60 * 60 * 24 * 7, // 1 week\n      })\n    );\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      admin: user.admin,\n      owner: user.owner,\n      shipper: user.shipper,\n      clinic: user.clinic,\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.resetPassword = async (req, res, next) => {\n  console.log(\"reset password\");\n  const phone = parseInt(req.body.phone);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    let generatedOTP = generateOTP();\n\n    let smsRes = await SMS.send(\n      user.phone,\n      `Your MotoBar OTP is ${generatedOTP}`\n    );\n    if (smsRes) {\n      if (smsRes[0] && smsRes[0].type === \"success\") {\n        user.otp = generatedOTP;\n        user.otpVerified = false;\n        user.resetPassword = true;\n        await user.save();\n        const token = setToken(user);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n      } else {\n        const error = new Error(smsRes.error.msg);\n        error.statusCode = 400;\n        throw error;\n      }\n    } else {\n      const error = new Error(\"Failed to send OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.verifyOtp = async (req, res, next) => {\n  const phone = parseInt(req.body.phone);\n  const otp = parseInt(req.body.otp);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n    console.log(user);\n    console.log(user.otp);\n    console.log(otp);\n    if (user.otp !== otp) {\n      const error = new Error(\"Invalid OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    user.otp = undefined;\n    user.otpVerified = true;\n\n    await user.save();\n\n    const token = setToken(user);\n    return res.status(201).json({\n      message: \"Success\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.resendOtp = async (req, res, next) => {\n  console.log(\"resend otp\");\n  const phone = parseInt(req.body.phone);\n  try {\n    // check if user logged in with phone or local email\n    let user = await User.findOne({\n      phone: phone,\n    });\n    if (!user) {\n      const error = new Error(\"user not found\");\n      error.statusCode = 400;\n      throw error;\n    }\n\n    let generatedOTP = generateOTP();\n\n    let smsRes = await SMS.send(\n      user.phone,\n      `Your MotoBar OTP is ${generatedOTP}`\n    );\n\n    if (smsRes) {\n      if (smsRes[0] && smsRes[0].type === \"success\") {\n        user.otp = generatedOTP;\n        user.otpVerified = false;\n        await user.save();\n        const token = setToken(user);\n        return res.status(201).json({\n          message: \"Success\",\n          token: token,\n        });\n      } else {\n        const error = new Error(smsRes.error.msg);\n        error.statusCode = 400;\n        throw error;\n      }\n    } else {\n      const error = new Error(\"Failed to send OTP\");\n      error.statusCode = 400;\n      throw error;\n    }\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.apple = async (req, res, next) => {\n  // const email = req.body.email;\n  const email = req.body.email;\n  const name = req.body.name;\n  const fcmToken = req.body.fcmToken;\n\n  try {\n    let existingAppleUser = await User.findOne({\n      \"apple.email\": email,\n    });\n    // check database for same apple email\n    if (existingAppleUser) {\n      const token = setToken(existingAppleUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingAppleUser.admin,\n        owner: existingAppleUser.owner,\n        token: token,\n      });\n    }\n    // check database for same email for other social platforms\n    const existingUser = await User.findOne({\n      $or: [{ \"google.email\": email }, { \"facebook.email\": email }],\n    });\n    if (existingUser) {\n      if(!existingUser.methods.includes(\"apple\")) {\n        existingUser.methods.push(\"apple\");\n      }\n      existingUser.apple = {\n        email: email,\n      };\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n    // // // check database for the same device used\n    // // if (fcmToken) {\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"apple\");\n    // //     existingDeviceUser.apple = {\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n    const newUser = new User({\n      name: name,\n      methods: [\"apple\"],\n      apple: {\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncApple = async (req, res, next) => {\n  // const email = req.body.email;\n  const email = req.body.email;\n  const name = req.body.name;\n  try {\n    const loggedInUser = req.user;\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n\n      if(!user.methods.includes(\"apple\")) {\n        user.methods.push(\"apple\");\n      }\n    user.apple = {\n      email: email,\n    };\n    await user.save();\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.google = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const fcmToken = req.body.fcmToken;\n  try {\n    let existingGoogleUser = await User.findOne({\n      \"google.id\": id,\n    });\n    if (existingGoogleUser) {\n      const token = setToken(existingGoogleUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingGoogleUser.admin,\n        owner: existingGoogleUser.owner,\n        token: token,\n      });\n    }\n    // const existingUser = await User.findOne({ \"facebook.email\": email });\n    const existingUser = await User.findOne({\n      $or: [{ \"apple.email\": email }, { \"facebook.email\": email }],\n    });\n    if (existingUser) {\n      if(!existingUser.methods.includes(\"google\")) {\n        existingUser.methods.push(\"google\");\n      }\n      existingUser.google = {\n        id: id,\n        email: email,\n      };\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n\n    // // if (fcmToken) {\n    // //   // check database for the same device used\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"google\");\n    // //     existingDeviceUser.google = {\n    // //       id: id,\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n\n    const newUser = new User({\n      name: name,\n      methods: [\"google\"],\n      google: {\n        id: id,\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncGoogle = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  try {\n    const loggedInUser = req.user;\n\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n \n      if(!user.methods.includes(\"google\")) {\n        user.methods.push(\"google\");\n   }\n    user.google = {\n      id: id,\n      email: email,\n    };\n    await user.save();\n    \n    \n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.facebook = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const image = req.body.image;\n  const fcmToken = req.body.fcmToken;\n  try {\n    let existingFacebookUser = await User.findOne({\n      \"facebook.id\": id,\n    });\n    if (existingFacebookUser) {\n      existingFacebookUser.image = image;\n      await existingFacebookUser.save();\n      const token = setToken(existingFacebookUser);\n\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingFacebookUser.admin,\n        owner: existingFacebookUser.owner,\n        token: token,\n      });\n    }\n    // const existingUser = await User.findOne({ \"facebook.email\": email });\n    const existingUser = await User.findOne({\n      $or: [{ \"apple.email\": email }, { \"google.email\": email }],\n    });\n    if (existingUser) {\n      // We want to merge google's data with local auth\n      if(!existingUser.methods.includes(\"facebook\")) {\n\n        existingUser.methods.push(\"facebook\");\n      }\n      existingUser.facebook = {\n        id: id,\n        email: email,\n      };\n      existingUser.image = image;\n      await existingUser.save();\n      const token = setToken(existingUser);\n      return res.status(200).json({\n        message: \"Logged in successfully\",\n        admin: existingUser.admin,\n        owner: existingUser.owner,\n        token: token,\n      });\n    }\n\n    // // if (fcmToken) {\n    // //   // check database for the same device used\n    // //   let existingDeviceUser = await User.findOne({\n    // //     fcmToken: fcmToken,\n    // //   });\n    // //   if (existingDeviceUser) {\n    // //     existingDeviceUser.methods.push(\"facebook\");\n    // //     existingDeviceUser.facebook = {\n    // //       id: id,\n    // //       email: email,\n    // //     };\n    // //     await existingDeviceUser.save();\n    // //     const token = setToken(existingDeviceUser);\n    // //     return res.status(200).json({\n    // //       message: \"Logged in successfully\",\n    // //       admin: existingDeviceUser.admin,\n    // //       owner: existingDeviceUser.owner,\n    // //       token: token,\n    // //     });\n    // //   }\n    // // }\n\n    const newUser = new User({\n      name: name,\n      image: image,\n      methods: [\"facebook\"],\n      facebook: {\n        id: id,\n        email: email,\n      },\n      fcmToken: fcmToken,\n    });\n\n    newUser.otpVerified = false;\n\n    await newUser.save();\n    const token = setToken(newUser);\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      token: token,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\nexports.syncFacebook = async (req, res, next) => {\n  // const email = req.body.email;\n  const id = req.body.id;\n  const email = req.body.email;\n  const name = req.body.name;\n  const image = req.body.image;\n  try {\n    const loggedInUser = req.user;\n\n\n\n\n    let user = await User.findById(loggedInUser._id)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n\n      if(!user.methods.includes(\"facebook\")) {\n        user.methods.push(\"facebook\");\n      }\n    user.facebook = {\n      id: id,\n      email: email,\n    };\n    user.image = image;\n    await user.save();\n\n\n    return res.status(200).json({\n      message: \"Logged in successfully\",\n      data: user,\n    });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.getProfile = async (req, res, next) => {\n  const authHeader = req.get(\"Authorization\");\n  if (!authHeader) {\n    const error = new Error(\"Not Authenticated.\");\n    error.statusCode = 401;\n    throw error;\n  }\n  const token = authHeader.split(\" \")[1];\n  let decodedToken;\n  try {\n    decodedToken = jwt.verify(token, \n    process.env.JWT_SECRET\n    // JWT_SECRET,\n    );\n  } catch (err) {\n    err.statusCode = 500;\n    throw err;\n  }\n  if (!decodedToken) {\n    const error = new Error(\"Not Authenticated.\");\n    error.statusCode = 401;\n    throw error;\n  }\n  try {\n    let user = await User.findById(decodedToken.userId)\n      .populate({\n        path: \"ownerId\",\n        model: \"Owner\",\n        populate: {\n          path: \"clinic\",\n          model: \"Clinic\",\n        },\n      })\n      .populate({\n        path: \"shipperId\",\n        model: \"Shipper\",\n      })\n      .populate({\n        path: \"leaderId\",\n        model: \"Leader\",\n        populate: {\n          path: \"group\",\n          model: \"Group\",\n        },\n      })\n      .populate({\n        path: \"products\",\n        model: \"Product\",\n      })\n      .populate({\n        path: \"orders\",\n        model: \"Order\",\n      })\n      .populate({\n        path: \"soldOrders\",\n        model: \"Order\",\n      });\n    if (!user) {\n      const error = new Error(\"Could not find user.\");\n      error.statusCode = 404;\n      throw error;\n    }\n\n    return res.status(200).json({ message: \"Profile fetched.\", data: user });\n  } catch (err) {\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err);\n  }\n};\n\nexports.facebookOAuth = async (req, res, next) => {\n  try {\n    const token = setToken(req.user);\n    return res.status(201).json({\n      message: \"Success\",\n      user: req.user,\n      token: token,\n    });\n  } catch (err) {\n    // use express to return error\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err); // sends err to the error handling message in app.js\n  }\n};\n\nexports.googleOAuth = async (req, res, next) => {\n  try {\n    const token = setToken(req.user);\n    res.status(201).json({\n      message: \"Success\",\n      user: req.user,\n      token: token,\n    });\n  } catch (err) {\n    // use express to return error\n    if (!err.statusCode) {\n      err.statusCode = 500;\n    }\n    next(err); // sends err to the error handling message in app.js\n  }\n};\n"],"file":"auth.dev.js"}